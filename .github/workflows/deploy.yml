name: Build and Deploy Web - DEV
on:
  push:
    branches:
      - master

env:
  DEPLOY_ENV: dev
  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN}}
  REGISTRY: ghcr.io
  IMAGE_NAME: cohstats/coh3-stats
  COOLIFY_UUID_DEV: eoccooco4kokk40gg8coow4k

jobs:
  build-deploy-web:
    name: Deploy Web Dev
    environment:
      name: dev
      url: https://dev.coh3stats.com/
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    concurrency:
      group: deploy-master-to-dev
      cancel-in-progress: true

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@master
        with:
          node-version: "22.x"
      - name: Cache node modules
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules-v2
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install Deps
        run: yarn --prefer-offline --frozen-lockfile install
      - name: Disable Vercel telemetry
        run: yarn next telemetry disable

      - name: Create Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: coh-stats
          SENTRY_PROJECT: coh3-stats-web
        with:
          environment: ${{ env.DEPLOY_ENV }}
          ignore_empty: true
          ignore_missing: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=ref,event=tag
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable=${{ github.ref_name == 'master' }}
            type=raw,value=development,enable=${{ github.ref_name == 'master' }}
            type=raw,value=production,enable=${{ startsWith(github.ref, 'refs/tags/v') }}
          labels: |
            org.opencontainers.image.title=COH3 Stats Frontend
            org.opencontainers.image.description=Company of Heroes 3 Statistics and Leaderboards
            org.opencontainers.image.vendor=COH Stats
            org.opencontainers.image.licenses=LGPL-3.0

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Deploy to Coolify
        if: success() && github.ref_name == 'master'
        run: |
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.COOLIFY_DEPLOY_TOKEN }}" \
            -H "Content-Type: application/json" \
            "https://coolify.ovh.coh3stats.com/api/v1/deploy?uuid=${{ env.COOLIFY_UUID_DEV }}&force=false"

# Commented out SST deployment
#      - name: "Deploy to AWS"
#        env:
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
#          CLOUDFLARE_DEFAULT_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_DEFAULT_ACCOUNT_ID }}
#        run: |
#          npx sst deploy --stage staging

#      - name: Deploy to Netlify hosting
#        env:
#          NETLIFY_AUTH_TOKEN: ${{secrets.NETLIFY_AUTH_TOKEN}}
#          NETLIFY_SITE_ID: ${{secrets.NETLIFY_SITE_ID_DEV}}
#          NODE_VERSION: "20.x"
#        run: |
#          npx netlify --telemetry-disable
#          npx netlify deploy --build --prod
#      - name: Deploy to Edgio hosting
#        env:
#          DEPLOY_TOKEN: ${{ secrets.EDGIO_V7_DEPLOY_TOKEN}}
#        # Deploy command automatically runs the build
#        # Deploy command pulls ENV variables https://docs.edg.io/guides/basics/environments#environment-variables
#        run: |
#          npx edgio deploy --property=coh3-stats --organization=coh-stats -e $EDGIO_ENV --token $DEPLOY_TOKEN
#          npx edgio cache-clear --property=coh3-stats --organization=coh-stats -e $EDGIO_ENV --token $DEPLOY_TOKEN --path=/

#      - name: Deploy to Vercel hosting - cohstats
#        env:
#          VERCEL_TOKEN: ${{secrets.VERCEL_TOKEN}}
#          VERCEL_ORG_ID: ${{secrets.VERCEL_ORG_ID}}
#          VERCEL_PROJECT_ID: ${{secrets.VERCEL_PROJECT_ID}}
#        run: |
#          npx vercel telemetry disable
#          npx vercel pull --yes --environment=preview --token=$VERCEL_TOKEN
#          npx vercel build --token=$VERCEL_TOKEN
#          npx vercel deploy --prebuilt --token=$VERCEL_TOKEN >deployment-url.txt 2>error.txt
#          code=$?
#          if [ $code -eq 0 ]; then
#            # Now you can use the deployment url from stdout for the next step of your workflow
#            deploymentUrl=`cat deployment-url.txt`
#      #     npx vercel alias $deploymentUrl dev.coh3stats.com --token=$VERCEL_TOKEN --scope cohstats
#          else
#            # Handle the error
#            errorMessage=`cat error.txt`
#            echo "There was an error: $errorMessage"
#          fi
#      - name: Deploy to Vercel hosting - PV org
#        env:
#          VERCEL_TOKEN: ${{secrets.VERCEL_DEPLOY_TOKEN_PV}}
#          VERCEL_ORG_ID: ${{secrets.VERCEL_ORG_ID_PV}}
#          VERCEL_PROJECT_ID: ${{secrets.VERCEL_PROJECT_ID_PV}}
#        run: |
#          npx vercel telemetry disable
#          npx vercel pull --yes --environment=preview --token=$VERCEL_TOKEN
#          npx vercel build --token=$VERCEL_TOKEN
#          npx vercel deploy --prebuilt --token=$VERCEL_TOKEN >deployment-url.txt 2>error.txt
#          code=$?
#          if [ $code -eq 0 ]; then
#            # Now you can use the deployment url from stdout for the next step of your workflow
#            deploymentUrl=`cat deployment-url.txt`
#            npx vercel alias $deploymentUrl dev.coh3stats.com --token=$VERCEL_TOKEN --scope petrveceras-projects
#          else
#            # Handle the error
#            errorMessage=`cat error.txt`
#            echo "There was an error: $errorMessage"
#          fi

#      - name: Deploy to Vercel hosting - PV org
#        env:
#          VERCEL_TOKEN: ${{secrets.VERCEL_DEPLOY_TOKEN_PV}}
#          VERCEL_ORG_ID: ${{secrets.VERCEL_ORG_ID_PV}}
#          VERCEL_PROJECT_ID: ${{secrets.VERCEL_PROJECT_ID_PV}}
#        run: |
#          npx vercel telemetry disable
#          npx vercel pull --yes --environment=preview --token=$VERCEL_TOKEN
#          npx vercel build --token=$VERCEL_TOKEN
#          npx vercel deploy --prebuilt --archive=tgz --token=$VERCEL_TOKEN >deployment-url.txt 2>error.txt
#          code=$?
#          if [ $code -eq 0 ]; then
#            # Now you can use the deployment url from stdout for the next step of your workflow
#            deploymentUrl=`cat deployment-url.txt`
#            npx vercel alias $deploymentUrl dev.coh3stats.com --token=$VERCEL_TOKEN --scope petrveceras-projects
#          else
#            # Handle the error
#            errorMessage=`cat error.txt`
#            echo "There was an error: $errorMessage"
#          fi
